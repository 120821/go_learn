---
layout: post
title: "Go 类型转换"
date:   2024-03-09 16:48:54 +0800
categories: go 数据结构
---
### Go支持以下形式的类型转换：
Go 支持显式类型转换以满足其严格的类型要求。

1. 直接类型转换（Type Conversion）：也称为强制类型转换，用于将一个类型的值转换为另一个类型。
在Go中，可以使用括号将要转换的类型放在待转换的值之前来进行直接类型转换。
例如：
```go
var a int = 10 和 var b float64 = float64(a)
```
将整数类型的变量 a 转换为浮点数类型的变量 b。

2. 接口类型转换（Interface Conversion）：Go中的接口类型是一种抽象类型，可以包含任何具体类型的值。
当需要将接口变量转换为其底层具体类型时，可以使用接口类型转换。
这种转换的格式为：value.(Type)，其中 value 是要转换的接口变量，Type 是目标类型。
例如：
```go
var i interface{} = "Hello", str := i.(string)
```
将接口变量 i 转换为字符串类型。

3. 类型断言（Type Assertion）：类型断言是一种检查接口变量底层类型的方式。
它的格式和接口类型转换类似，也是使用 value.(Type) 的形式。
但是，与接口类型转换不同的是，类型断言还可以返回一个布尔值，表示类型断言是否成功。
例如：
```go
var i interface{} = "Hello", str, ok := i.(string)
```
将接口变量 i 转换为字符串类型，并通过 ok 变量来判断转换是否成功。

### 不支持的类型转换:

1. 不兼容的基本类型之间的转换：例如，无法直接将字符串类型转换为整数类型或布尔类型，因为它们是不兼容的类型。

2. 结构体之间的转换：不同结构体类型之间的转换是不允许的，即使它们的字段相同。需要手动将一个结构体的字段值逐个赋值给另一个结构体的字段。

3. 数组之间的转换：不同长度或不同类型的数组之间不能直接进行转换。需要通过遍历或逐个元素复制的方式来进行转换。

4. 切片和数组之间的转换：切片和数组虽然有一定的关联，但它们是不同的类型，不能直接进行转换。需要使用循环或内置的copy函数来复制元素。

5. 指针和其他类型之间的转换：指针类型与其他类型之间的转换需要使用显式的类型转换语法，但是这可能会导致不安全的操作，因此需要谨慎处理。

